name: Docker Compose CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start Docker Compose services
        run: |
          docker-compose up -d # Lance les conteneurs en mode détaché

      - name: Wait for containers to start
        run: sleep 30 # Augmenté pour donner plus de temps à Kafka et aux APIs

      - name: Check container status
        run: |
          docker-compose ps # Affiche l'état des conteneurs
          # Vérifie qu'aucun conteneur n'a le statut "Exit"
          if docker-compose ps | grep -q "Exit"; then
            echo "Erreur : Certains conteneurs ont échoué !"
            docker-compose logs # Affiche les logs pour debugging
            exit 1
          else
            echo "Tous les conteneurs sont démarrés avec succès !"
          fi

      - name: Verify APIs
        run: |
          # Fonction pour vérifier une API
          check_api() {
            local api_name=$1
            local port=$2
            local endpoint=$3
            local max_attempts=$4
            local attempt=1
            local url="http://localhost:$port$endpoint"

            echo "Vérification de l'API $api_name sur le port $port (endpoint $endpoint)..."
            while [ $attempt -le $max_attempts ]; do
              # Utilise un timeout de 10 secondes pour éviter d'attendre trop longtemps
              if curl -s --connect-timeout 10 -o /dev/null -w "%{http_code}" $url | grep -q "200"; then
                echo "API $api_name est opérationnelle !"
                return 0
              else
                echo "Tentative $attempt/$max_attempts : API $api_name n'est pas encore prête, nouvelle tentative dans 5 secondes..."
                sleep 5
                attempt=$((attempt + 1))
              fi
            done

            echo "Erreur : L'API $api_name n'a pas démarré après $max_attempts tentatives !"
            docker-compose logs $api_name  # Affiche les logs de l'API pour débogage
            exit 1
          }

          # Vérifier chaque API avec son endpoint spécifique
          check_api "api-transactions" "5000" "/generate/transaction" "30"
          check_api "api-customers" "5001" "/generate/customer" "30"
          # Pour api-externaldata, limiter les tentatives à cause du délai de 60 secondes
          check_api "api-externaldata" "5002" "/generate/externaldata" "10"
      
      - name: Debug Network Connectivity
        run: |
          echo "Vérification de la résolution DNS pour api-transactions..."
          docker exec kafka bash -c "ping -c 4 api-transactions || echo \"Échec de la résolution DNS pour api-transactions\""
          echo "Test de la connexion à l'API..."
          docker exec kafka bash -c "curl -v http://api-transactions:5000/generate/transaction || echo \"Échec de la connexion à l'API\""

      - name: Verify Kafka Producer and Consumer
        run: |
          # Étape 1 : Exécuter le producteur Kafka
          echo "Exécution du producteur Kafka (transactions_producer.py)..."
          docker exec kafka bash -c "cd /application/producer && python3 transactions_producer.py"
          if [ $? -ne 0 ]; then
            echo "Erreur lors de l'exécution de transactions_producer.py !"
            docker-compose logs kafka  # Affiche les logs pour débogage
            exit 1
          fi
          echo "Producteur Kafka exécuté avec succès !"

          # Étape 2 : Exécuter le consommateur Kafka
          echo "Exécution du consommateur Kafka (consumer_transaction.py)..."
          docker exec kafka bash -c "cd /application/consumer && python3 consumer_transaction.py &"
          # Attendre un peu pour que le consommateur ait le temps de traiter les messages
          sleep 30
          if ! docker ps | grep -q "kafka"; then
            echo "Erreur : Le conteneur kafka n'est plus en cours d'exécution !"
            docker-compose logs kafka
            exit 1
          fi
          echo "Consommateur Kafka démarré avec succès !"

          # Étape 3 : Vérifier la présence de fichiers .parquet dans /data/transactions
          echo "Vérification de la présence de fichiers .parquet dans /data/transactions..."
          parquet_files=$(docker exec kafka bash -c "ls -1 /data/transactions/*.parquet 2>/dev/null | wc -l")
          if [ "$parquet_files" -eq 0 ]; then
            echo "Erreur : Aucun fichier .parquet n'a été trouvé dans /data/transactions !"
            docker-compose logs kafka  # Affiche les logs pour débogage
            exit 1
          else
            echo "Fichiers .parquet trouvés dans /data/transactions : $parquet_files fichier(s) détecté(s)."
            # Afficher les noms des fichiers pour confirmation
            docker exec kafka bash -c "ls -lh /data/transactions/*.parquet"
          fi

      - name: Clean up
        if: always() 
        run: |
          docker-compose down # Arrête et supprime les conteneurs