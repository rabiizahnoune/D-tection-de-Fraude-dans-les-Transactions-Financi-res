name: Docker Compose CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start Docker Compose services
        run: |
          docker-compose up -d # Lance les conteneurs en mode détaché

      - name: Wait for containers to start
        run: sleep 20 # Attendre un peu pour que les conteneurs démarrent (augmenté pour Kafka et les APIs)

      - name: Check container status
        run: |
          docker-compose ps # Affiche l'état des conteneurs
          # Vérifie qu'aucun conteneur n'a le statut "Exit"
          if docker-compose ps | grep -q "Exit"; then
            echo "Erreur : Certains conteneurs ont échoué !"
            docker-compose logs # Affiche les logs pour debugging
            exit 1
          else
            echo "Tous les conteneurs sont démarrés avec succès !"
          fi

      - name: Verify APIs
        run: |
          # Fonction pour vérifier une API
          check_api() {
            local api_name=$1
            local port=$2
            local max_attempts=30
            local attempt=1
            local url="http://localhost:$port/health"  # Remplace /health par l'endpoint approprié

            echo "Vérification de l'API $api_name sur le port $port..."
            while [ $attempt -le $max_attempts ]; do
              if curl -s -o /dev/null -w "%{http_code}" $url | grep -q "200"; then
                echo "API $api_name est opérationnelle !"
                return 0
              else
                echo "Tentative $attempt/$max_attempts : API $api_name n'est pas encore prête, nouvelle tentative dans 5 secondes..."
                sleep 5
                attempt=$((attempt + 1))
              fi
            done

            echo "Erreur : L'API $api_name n'a pas démarré après $max_attempts tentatives !"
            docker-compose logs $api_name  # Affiche les logs de l'API pour débogage
            exit 1
          }

          # Vérifier chaque API
          check_api "api-transactions" "5000"
          check_api "api-customers" "5001"
          check_api "api-externaldata" "5002"

      - name: Run Kafka Producer
        run: |
          echo "Exécution du producteur Kafka (transactions_producer.py)..."
          docker exec kafka bash -c "cd /application/producer && python3 transactions_producer.py"
          if [ $? -ne 0 ]; then
            echo "Erreur lors de l'exécution de transactions_producer.py !"
            docker-compose logs kafka  # Affiche les logs pour débogage
            exit 1
          fi
          echo "Producteur Kafka exécuté avec succès !"

      - name: Run Kafka Consumer
        run: |
          echo "Exécution du consommateur Kafka (consumer_transaction.py)..."
          docker exec kafka bash -c "cd /application/consumer && python3 consumer_transaction.py"
          if [ $? -ne 0 ]; then
            echo "Erreur lors de l'exécution de consumer_transaction.py !"
            docker-compose logs kafka  # Affiche les logs pour débogage
            exit 1
          fi
          echo "Consommateur Kafka exécuté avec succès !"

      - name: Verify Parquet Files in /data/transactions
        run: |
          echo "Vérification de la présence de fichiers .parquet dans /data/transactions..."
          # Attendre un peu pour s'assurer que le consommateur a fini d'écrire
          sleep 10
          # Lister les fichiers .parquet dans /data/transactions
          parquet_files=$(docker exec kafka bash -c "ls -1 /data/transactions/*.parquet 2>/dev/null | wc -l")
          if [ "$parquet_files" -eq 0 ]; then
            echo "Erreur : Aucun fichier .parquet n'a été trouvé dans /data/transactions !"
            docker-compose logs kafka  # Affiche les logs pour débogage
            exit 1
          else
            echo "Fichiers .parquet trouvés dans /data/transactions : $parquet_files fichier(s) détecté(s)."
            # Afficher les noms des fichiers pour confirmation
            docker exec kafka bash -c "ls -lh /data/transactions/*.parquet"
          fi

      - name: Clean up
        if: always() # S'exécute même si une étape précédente échoue
        run: |
          docker-compose down # Arrête et supprime les conteneurs